# -*- coding: utf-8 -*-
"""Find Duplicate Titles

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q0Kf5jGGORb-frgIBDgpA-k4p8ieEiO7
"""

!pip install sentence-transformers
!pip install tqdm

import pandas as pd
from sentence_transformers import SentenceTransformer, util
from google.colab import files
import io
from IPython.display import display
from tqdm.notebook import tqdm

def load_csv():
    uploaded = files.upload()
    if not uploaded:
        print("File upload failed or cancelled.")
        return None

    file_name = next(iter(uploaded))
    df = pd.read_csv(io.BytesIO(uploaded[file_name]))
    return df

def find_similar_titles(df, model):
    similar_titles = []
    new_titles = df['New Titles'].dropna().tolist()
    current_titles = df['Current Titles'].dropna().tolist()

    new_title_embeddings = model.encode(new_titles, convert_to_tensor=True, show_progress_bar=True)
    current_title_embeddings = model.encode(current_titles, convert_to_tensor=True, show_progress_bar=True)

    # Compute pairwise cosine similarities
    similarities = util.pytorch_cos_sim(new_title_embeddings, current_title_embeddings)

    for i in tqdm(range(len(new_titles)), desc='Processing', leave=False):
        for j in range(len(current_titles)):
            similarity = similarities[i][j].item()
            if similarity >= 0.8:
                similar_titles.append({
                    'Current Title': current_titles[j],
                    'New Title': new_titles[i],
                    'Score': similarity
                })

    return pd.DataFrame(similar_titles).sort_values(by='Score', ascending=False)

def main():
    df = load_csv()
    if df is not None:
        model = SentenceTransformer('paraphrase-MiniLM-L6-v2')
        result_df = find_similar_titles(df, model)

        if not result_df.empty:
            print("\nSimilar Titles Found:")
            display(result_df)
        else:
            print("\nNo similar titles found.")

if __name__ == "__main__":
    main()